syntax = "proto3";

package fresheyes;

// Define the message types for PullRequestDetails, PullRequest, Branch, etc.
message PullRequestDetails {
  string base_sha =  1;
  string head_sha =  2;
  string base_ref =  3;
  string head_ref =  4;
  string title =  5;
  string body =  6;
}

message PullRequest {
  string owner =  1;
  string repo =  2;
  string title =  3;
  string body =  4;
  string head =  5;
  string base =  6;
  int32 pull_number =  7;
}

message Branch {
  string owner =  1;
  string repo =  2;
  string branch_ref =  3;
  string sha =  4;
}

message ForkRequest {
  string owner =  1;
  string repo =  2;
}

message ForkResult {
  string owner =  1;
  string repo =  2;
  string forked_repo =  3;
}

message UserFields {
  string login =  1;
}

message ReviewComment {
  int64 id =  1;
  string body =  2;
  string commit_id =  3;
  string path =  4;
  int64 line =  5;
  int64 start_line =  6;
  int64 original_line =  7;
  int64 position =  8;
  int64 original_position =  9;
  string side =  10;
  string start_side =  11;
  string url =  12;
  string html_url =  13;
  string subject_type =  14;
  string created_at =  15;
  string updated_at =  16;
  UserFields user =  17;
}

message ErrorResponse {
  string message =  1;
  int32 status =  2;
}

message PrResponse {
  string pr_url = 1;
}

message Empty {
  
}

// Define the service with the necessary RPC methods.
service GitHubService {
  rpc ForkRepository(ForkRequest) returns (ForkResult);
  rpc CreateBranch(Branch) returns (Branch);
  rpc CreatePullRequest(PullRequest) returns (PullRequestDetails);
  rpc ProcessPullRequest(PullRequest) returns (PrResponse);
//  rpc GetPullRequestReviews(PullRequest) returns (ReviewComment);
  rpc check(Empty) returns (Empty);
}